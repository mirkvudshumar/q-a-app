{"version":3,"sources":["components/ViewQuestions/QaElement/QaElement.module.css","components/UI/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Aux.js","components/UI/Tooltip/Tooltip.js","components/ViewQuestions/QaElement/QaElement.js","components/ViewQuestions/ViewQuestions.js","components/CreateQuestion/CreateQuestion.js","components/Sidebar/Sidebar.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/EditQuestion/EditQuestion.js","containers/QaTool/QaTool.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","tooltip","className","data-tooltip","infoText","qaElement","answer","qaPair","show","key","id","styles","qaSection","onClick","showAnswer","question","buttonsSection","edit","editQuestion","remove","removeQuestion","viewQuestions","questionList","qaPairs","map","e","index","QaElement","noQuestionsStyle","length","backgroundColor","Aux","Tooltip","style","sortQuestions","removeAll","createQuestion","onSubmit","submit","autoComplete","htmlFor","name","type","required","sidebar","sideText","backdrop","close","modal","Backdrop","transform","onSubmitEdit","value","editedValues","onChange","editInput","QaTool","state","editing","editedQuestionId","createQuestionHandleSubmit","event","preventDefault","input","target","updatedState","setState","sort","a","b","toLowerCase","removeAllQuestions","clickedQuestion","findIndex","shouldShow","splice","editQuestionActivate","modalClosed","editQuestionOnChange","elementName","sumbitEdit","Sidebar","this","ViewQuestions","CreateQuestion","Modal","EditQuestion","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17aca9b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"qaSection\":\"QaElement_qaSection__2Z002\",\"buttonsSection\":\"QaElement_buttonsSection__2yvSN\",\"edit\":\"QaElement_edit__T2e0z\",\"remove\":\"QaElement_remove__2LBI-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__30MRu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__3aIp6\"};","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\n\nimport propTypes from 'prop-types';\n\nconst tooltip = (props) => {\n\treturn (\n\t\t<span className=\"tooltip\" data-tooltip={props.infoText}>\n\t\t\t<p>?</p>\n\t\t</span>\n\t);\n}\n\ntooltip.propTypes = {\n\tinfoText: propTypes.string.isRequired\n};\n\nexport default tooltip;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport styles from './QaElement.module.css';\n\nconst qaElement = (props) => {\n\tlet answer = props.qaPair.show ? props.qaPair.answer : null;\n\treturn(\n\t\t\t<li key={props.qaPair.id} >\n\t\t\t\t<div className={styles.qaSection}>\n\t\t\t\t\t<p onClick={props.showAnswer}>{props.qaPair.question}</p>\n\t\t\t\t\t<p>{answer}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className={styles.buttonsSection}>\n\t\t\t\t\t<button className={styles.edit} onClick={props.editQuestion}>\n\t\t\t\t\t\t<i className=\"fas fa-pen-square\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className={styles.remove} onClick={props.removeQuestion}>\n\t\t\t\t\t\t<i className=\"fas fa-trash-alt\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</li>\n\t)\n}\n\nqaElement.propTypes = {\n\tqaPair: propTypes.object.isRequired,\n\tshowAnswer: propTypes.func.isRequired,\n\tremoveQuestion: propTypes.func.isRequired,\n\teditQuestion: propTypes.func.isRequired,\n};\n\nexport default qaElement;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport './ViewQuestions.module.css';\nimport Aux from '../../hoc/Aux';\nimport Tooltip from '../UI/Tooltip/Tooltip';\nimport QaElement from './QaElement/QaElement';\n\nconst viewQuestions = (props) => {\n\n\t/* List of questions\n\t---------------------------------------------------------------------------*/\n\tlet questionList = props.qaPairs.map((e, index) => {\n\t\treturn (\n\t\t\t<QaElement \n\t\t\t\tqaPair={e}\n\t\t\t\tshowAnswer={() => props.showAnswer(e.id)}\n\t\t\t\tremoveQuestion={() => props.removeQuestion(e.id)}\n\t\t\t\teditQuestion={() => props.editQuestion(e.id)}\n\t\t\t/>\n\t\t);\n\t});\n\n\t/* No questions entered case\n\t---------------------------------------------------------------------------*/\n\tlet noQuestionsStyle = null;\n\tif (props.qaPairs.length === 0) {\n\t\tquestionList = <p>No questions yet</p>\n\t\tnoQuestionsStyle = {backgroundColor: '#ffccd2'};\n\t}\n\n\treturn (\n\t\t<Aux>\n\t\t\t<h2>\n\t\t\t\tCreated questions\n\t\t\t\t<Tooltip infoText=\"Here you can find created questions and their answers.\" />\n\t\t\t</h2>\n\t\t\t<ul style={noQuestionsStyle}>\n\t\t\t\t{questionList}\t\n\t\t\t</ul>\n\t\t\t<div className=\"Buttons\">\n\t\t\t\t<button className=\"sort\" onClick={props.sortQuestions}>Sort</button>\n\t\t\t\t<button className=\"removeAll\" onClick={props.removeAll}>Remove questions</button>\n\t\t\t</div>\n\t\t</Aux>\n\t)\n}\n\nviewQuestions.propTypes = {\n\tqaPairs: propTypes.array.isRequired,\n\tremoveAll: propTypes.func.isRequired,\n\tsortQuestions: propTypes.func.isRequired,\n\tshowAnswer: propTypes.func.isRequired,\n\tremoveQuestion: propTypes.func.isRequired,\n\teditQuestion: propTypes.func.isRequired,\n};\n\nexport default viewQuestions;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport './CreateQuestion.module.css';\nimport Aux from '../../hoc/Aux';\nimport Tooltip from '../UI/Tooltip/Tooltip';\n\n\nconst createQuestion = (props) => {\t\t\t\n\treturn (\n\t\t<Aux>\n\t\t\t<h2>\n\t\t\t\tCreate a new question\n\t\t\t\t<Tooltip infoText=\"Here you can create new questions and their answers.\" />\n\t\t\t</h2>\n\t\t\t<form onSubmit={props.submit} autoComplete=\"off\">\n\t\t\t\t<label htmlFor=\"question\">Question</label>\n\t\t\t\t<input  \n\t\t\t\t\tname=\"question\" \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\trequired\n\t\t\t\t>\n\t\t\t\t</input>\n\t\t\t\t<label htmlFor=\"answer\">Answer</label>\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"answer\"  \n\t\t\t\t\trequired\n\t\t\t\t>\t\n\t\t\t\t</textarea>\n\t\t\t\t<button className=\"create\">Submit</button>\n\t\t\t</form>\n\t\t</Aux>\n\t)\n}\n\ncreateQuestion.propTypes = {\n\tqaPairs: propTypes.array\n};\n\nexport default createQuestion;","import React from 'react';\n\nimport propTypes from 'prop-types';\n\nconst sidebar = (props) => {\n\tlet sideText = null;\n\n\tif(props.qaPairs.length === 0) {\n\t\tsideText = <p>Here you can find no questions. Feel free to create your own questions! </p>;\n\t}\n\n\telse if (props.qaPairs.length === 1) {\n\t\tsideText = <p>Here you can find one question. Feel free to create your own questions! </p>;\n\t}\n\telse if (props.qaPairs.length > 1) {\n\t\tsideText = <p>Here you can find {props.qaPairs.length} questions. Feel free to create your own questions! </p>;\n\t}\n\n\treturn sideText;\n}\n\nsidebar.propTypes = {\n\tsubmit: propTypes.func\n};\n\nexport default sidebar;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport styles from './Backdrop.module.css';\n\nconst backdrop = (props) => (\n\tprops.show ? <div className={styles.backdrop} onClick={props.close}></div> : null\n)\n\nbackdrop.propTypes = {\n\tshow: propTypes.bool.isRequired,\n\tclose: propTypes.func.isRequired\n};\n\nexport default backdrop;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport styles from './Modal.module.css';\nimport Aux from '../../../hoc/Aux';\nimport Backdrop from '../Backdrop/Backdrop';\n\nconst modal = (props) => {\t\n\treturn (\n\t\t<Aux>\n\t\t\t<Backdrop show={props.show} close={props.close} />\n\t\t\t<div \n\t\t\t\tclassName={styles.modal}\n\t\t\t\tstyle={{transform: props.show ? 'translateY(0)' : 'translateY(-100vh)'}}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t</Aux>\n\t)\n}\n\nmodal.propTypes = {\n\tshow: propTypes.bool.isRequired,\n\tclose: propTypes.func.isRequired\n};\n\nexport default modal;","import React from 'react';\n\nimport propTypes from 'prop-types';\nimport './EditQuestion.module.css';\nimport Aux from '../../hoc/Aux';\nimport Tooltip from '../UI/Tooltip/Tooltip';\n\nconst editQuestion = (props) => {\t\t\t\n\treturn (\n\t\t<Aux>\n\t\t\t<h2>\n\t\t\t\tEdit question\n\t\t\t\t<Tooltip infoText=\"Here you can edit selected question.\" />\n\t\t\t</h2>\n\t\t\t<form onSubmit={props.onSubmitEdit} autoComplete=\"off\">\n\t\t\t\t<label htmlFor=\"question\">Question</label>\n\t\t\t\t<input  \n\t\t\t\t\tname=\"question\" \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue= {props.show ? props.editedValues.question : ''} \n\t\t\t\t\tonChange={props.editInput}\n\t\t\t\t\trequired\n\t\t\t\t>\n\t\t\t\t</input>\n\t\t\t\t<label htmlFor=\"answer\">Answer</label>\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"answer\"\n\t\t\t\t\tvalue={props.show ? props.editedValues.answer : ''}  \n\t\t\t\t\tonChange={props.editInput}\n\t\t\t\t\trequired\n\t\t\t\t>\t\n\t\t\t\t</textarea>\n\t\t\t\t<button className=\"create\">Submit</button>\n\t\t\t</form>\n\t\t</Aux>\n\t)\n}\n\n\neditQuestion.propTypes = {\n\teditedValues: propTypes.object,\n\tshow: propTypes.bool.isRequired,\n\teditInput: propTypes.func.isRequired,\t\n\tonSubmitEdit: propTypes.func.isRequired\n};\n\nexport default editQuestion;","import React, { Component } from 'react';\n\nimport './QaTool.css';\nimport ViewQuestions from '../../components/ViewQuestions/ViewQuestions';\nimport CreateQuestion from '../../components/CreateQuestion/CreateQuestion';\nimport Sidebar from '../../components/Sidebar/Sidebar';\nimport Modal from '../../components/UI/Modal/Modal';\nimport EditQuestion from '../../components/EditQuestion/EditQuestion';\n\nclass QaTool extends Component {\n\tstate = {\n\t\tqaPairs : [],\n\t\tediting: false,\n\t\teditedQuestionId: null\n\t}\t\n\t\n\tcreateQuestionHandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst questionsNumber = this.state.qaPairs.length;\n\t\tconst input =  {\n\t\t\tid: questionsNumber,\n\t\t\tquestion: event.target.question.value,\n\t\t\tanswer: event.target.answer.value,\n\t\t\tshow: false\n\t\t};\n\t\tconst updatedState = [...this.state.qaPairs, input];\n\t\tthis.setState({qaPairs: updatedState});\n\t}\n\n\t/* All questions actions\n\t---------------------------------------------------------------------------*/\n\tsortQuestions = () => {\n\t\tlet updatedState = [...this.state.qaPairs];\n\t\tupdatedState = updatedState.sort((a, b) => (a.question.toLowerCase() > b.question.toLowerCase()) ? 1 : -1);\n\t\tthis.setState({qaPairs: updatedState});\n\t}\n\n\tremoveAllQuestions = () => {\n\t\tthis.setState({qaPairs: []});\n\t}\n\n\t/* Single question actions\n\t--------------------------------------------------------------------------- */\n\tshowAnswer = (id) => {\n\t\tlet updatedState = [...this.state.qaPairs];\n\t\tconst clickedQuestion = updatedState.findIndex(e => id === e.id);\n\t\tconst shouldShow = updatedState[clickedQuestion].show;\n\t\tupdatedState[clickedQuestion].show = !shouldShow;\n\t\tthis.setState({qaPairs: updatedState});\n\t}\n\n\tremoveQuestion = (id) => {\n\t\tlet updatedState = [...this.state.qaPairs];\n\t\tconst clickedQuestion = updatedState.findIndex(e => id === e.id);\n\t\tupdatedState.splice(clickedQuestion, 1);\n\t\tthis.setState({qaPairs: updatedState});\n\t}\n\n\t// Edit question\n\teditQuestionActivate = (id) => {\n\t\tthis.setState({editing: true, editedQuestionId: id});\n\t}\n\n\tmodalClosed = () => {\n\t\tthis.setState({editing: false, editedQuestionId: null})\n\t}\n\teditQuestionOnChange = (event) => {\n\t\tlet updatedState = [...this.state.qaPairs];\n\t\tconst elementName = event.target.name;\n\t\tupdatedState[this.state.editedQuestionId][elementName] = event.target.value;\n\t\tthis.setState({qaPairs: updatedState});\n\t}\n\tsumbitEdit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({editing: false})\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"content\">\n\t\t\t\t<h1>Q/A tool</h1>\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<aside>\n\t\t\t\t\t\t<Sidebar qaPairs={this.state.qaPairs}/>\n\t\t\t\t\t</aside>\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<ViewQuestions \n\t\t\t\t\t\t\tqaPairs={this.state.qaPairs} \n\t\t\t\t\t\t\tremoveAll={this.removeAllQuestions}\n\t\t\t\t\t\t\tsortQuestions={this.sortQuestions}\n\t\t\t\t\t\t\tshowAnswer={this.showAnswer}\n\t\t\t\t\t\t\tremoveQuestion={this.removeQuestion}\n\t\t\t\t\t\t\teditQuestion={this.editQuestionActivate}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CreateQuestion submit={this.createQuestionHandleSubmit} />\n\t\t\t\t\t\t<Modal \n\t\t\t\t\t\t\tshow={this.state.editing} \n\t\t\t\t\t\t\tclose={this.modalClosed}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EditQuestion \n\t\t\t\t\t\t\t\teditedValues={this.state.qaPairs[this.state.editedQuestionId]} \n\t\t\t\t\t\t\t\tshow={this.state.editing}\n\t\t\t\t\t\t\t\teditInput={this.editQuestionOnChange}\n\t\t\t\t\t\t\t\tonSubmitEdit={this.sumbitEdit}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Modal>\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\t\n\t}\n}\n\nexport default QaTool;","import React from 'react';\n\nimport QaTool from './containers/QaTool/QaTool'\n\nfunction App() {\n  return <QaTool />;\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}